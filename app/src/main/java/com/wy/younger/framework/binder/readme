Binder：Android中的进程间的通信机制

作为 Android 工程师的你，是不是常常会有这样的疑问：

为什么 Activity 间传递对象需要序列化？
Activity 的启动流程是什么样的？
四大组件底层的通信机制是怎样的？
AIDL 内部的实现原理是什么？
插件化编程技术应该从何学起？等等...
这些问题的背后都与 Binder 有莫大的关系，要弄懂上面这些问题理解 Bidner 通信机制是必须的。


android是基于linux的，linux中ipc机制有 管道，消息队列，socket，共享内存等
相对而言 binder的优势有：
1.一次内存copy，减少消耗
2.uid作为app的进程id，更加安全
3.基于c/s架构，更加稳定

Linux的IPC介绍：
1.进程隔离：不同的进程间，内存不能共享
2.内存空间分为 用户空间user和内核空间kernel
3.进程运行代码用户空间和内核空间分为 用户运行态和内核运行态

流程
1.进程1copy发送数据到内核缓存区
2.内核缓存区copy发送到进程2中
3.实现了进程的通信


缺点：
1.需要两次copy，浪费内存
2.内核缓存区大小事先无法确知，只能开辟尽量大的区域或者先进行通信告知大小

Binder实现的可能
1.linux的内核可加载模块
2.内存映射mmap

Binder实现原理
1.首先 Binder 驱动在内核空间创建一个数据接收缓存区
2.接着在内核空间开辟一块内核缓存区，建立内核缓存区和内核中
数据接收缓存区之间的映射关系，以及内核中数据接收缓存区和接收进程用户空间地址的映射关系；
3.发送方进程通过系统调用将数据 copy 到内核中的内核缓存区，
由于内核缓存区和接收进程的用户空间存在内存映射，
因此也就相当于把数据发送到了接收进程的用户空间，这样便完成了一次进程间的通信。


Binder实现流程
