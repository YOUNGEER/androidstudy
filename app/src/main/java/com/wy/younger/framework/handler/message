message:
作为消息的载体，属性有：
what ，arg1，arg2，object等

方法：
obtain：获取一个message对象


   public static Message obtain() {
        synchronized (sPoolSync) {
            if (sPool != null) {
                Message m = sPool;
                sPool = m.next;
                m.next = null;
                m.flags = 0; // clear in-use flag
                sPoolSize--;
                return m;
            }
        }
        return new Message();
    }

obtain()的实现非常有意思，我们知道message其实是复用的，
message中有一个方法：recycle()，大家可以去看一下，消息被处理完毕后会调用recycle()方法，
将message还原，并将sPool这个赋值为this，也就是当前自己的实例对象，

    void recycleUnchecked() {
        // Mark the message as in use while it remains in the recycled object pool.
        // Clear out all other details.
        flags = FLAG_IN_USE;
        what = 0;
        arg1 = 0;
        arg2 = 0;
        obj = null;
        replyTo = null;
        sendingUid = -1;
        when = 0;
        target = null;
        callback = null;
        data = null;

        synchronized (sPoolSync) {
            if (sPoolSize < MAX_POOL_SIZE) {
                next = sPool;
                sPool = this;
                sPoolSize++;
            }
        }
    }


如果sPool是null那么当前没有消息可以复用，直接new出来并返回，


如果不是null，那么将当前的sPool返回，那么这个next又是干什么的呢？
代码可见，sPool =m.next;将sPool重新赋值，这个m.next就是一条将要处理的消息，

也就是说每一个msg里面都有对下一个将要处理的消息的引用，这样，sPool被赋值了，
下次再执行obtain()的时候，sPool指向的其实是另外一个Message实例了，
至于next如何赋值，稍后在MessageQueue中详细解析。



重点：为什么msg要保存handler的引用呢？
我们都知道，handler机制消息处理，哪一个handler实例发出的消息，
那么那一个handler就负责处理这个消息，这里的msg.target = this;
作用就在这，用来记住谁将msg发出来，等到处理的时候谁就来处理。













