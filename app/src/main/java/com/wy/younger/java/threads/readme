java多线程编程
Thread
Runnable
Callable+Future


锁 synchronize   volatile

通信

线程池


Executor框架包括：线程池，Executor，Executors，ExecutorService，CompletionService，Future，Callable等

1.推荐使用实现runnable而不是集成thread的方式，因为runnable可以共用，多个thread对象可以共用一个runnable




chapter1：java实现多线程的三种方式

chapter2：线程中断 interrupt

使用interrupt（）中断线程当一个线程运行时，另一个线程可以调用对应的
Thread对象的interrupt（）方法来中断它，该方法只是在目标线程中设置一个标志，
表示它已经被中断，并立即返回

join方法用线程对象调用，如果在一个线程A中调用另一个线程B的join方法，
线程A将会等待线程B执行完毕后再执行。
yield可以直接用Thread类调用，yield让出CPU执行权给同等级的线程，
如果没有相同级别的线程在等待CPU的执行权，则该线程继续执行。


chapter3:挂起 suspend    继续resume   这是两个丢弃的方法，不建议使用  一般自己通过设置boolean类型的标志位判断


chapter4：用户线程和守护线程    线程阻塞


java的原子性和可见性


原子性

原子是世界上的最小单位，具有不可分割性。比如 a=0；（a非long和double类型）
 这个操作是不可分割的，那么我们说这个操作时原子操作。再比如：a++；
 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。
 非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）
 来让它变成一个原子操作。一个操作是原子操作，那么我们称它具有原子性。
 java的concurrent包下提供了一些原子类，我们可以通过阅读API来了解这些
 原子类的用法。比如：AtomicInteger、AtomicLong、AtomicReference等。

可见性

可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。
也就是一个线程修改的结果。另一个线程马上就能看到。比如：用volatile修饰的变量，
就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。
所以对其他线程是可见的。但是这里需要注意一个问题，volatile只能让被他修饰内容具
有可见性，但不能保证它具有原子性。比如 volatile int a = 0；之后有一个操作
a++；这个变量a具有可见性，但是a++ 依然是一个非原子操作，也就这这个操作同样存在线程安全问题。



chapter5：volatile用法  volatile具有可见性，但不具备原子性

 volatile保证了不同线程间操作同一个对象，始终能获取到最新的数据，这是因为不同的线程为了保证可以快速
      执行，一般变量都保存在cache中，volatile使得变量保存在主内存中，但是相对来讲  效率可能会有一定影响


chapter6: synchronized关键字的用法       互斥性和可见性（具有可见性和原子性）
          锁可以分为类锁和对象锁
          可以修饰 类，静态代码块   方法，静态方法
          synchronized关键字不能继承。

           对于父类中的 synchronized 修饰方法，子类在覆盖该方法时，默认情况下不是同步的，必须显示的使用 synchronized 关键字修饰才行。

          在定义接口方法时不能使用synchronized关键字。

          构造方法不能使用synchronized关键字，但可以使用synchronized代码块来进行同步。

          锁本质是操作系统是实现的，所有性能上会有一定的影响



volatile和synchronize的比较：
1.volatile是一种相对synchronize更轻量的同步机制，它没有锁的机制，所以不会造成线程阻塞
2.从内存可见性角度，volatile实质是从主内存写入和读取，没有synchronize那种严格
3.volatile由于其并不是特别安全，所以对于数据特别严重的时候，最好用synchronize方式
4、加锁机制（即同步机制）既可以确保可见性又可以确保原子性，而volatile变量只能确保可见性，
原因是声明为volatile的简单变量如果当前值与该变量以前的值相关，那么volatile关键字不起作用，
也就是说如下的表达式都不是原子操作：“count++”、“count = count+1”。

     当且仅当满足以下所有条件时，才应该使用volatile变量：

     1、对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值。

     2、该变量没有包含在具有其他变量的不变式中。


chapter7：死锁   两个锁之间互相持有对方的引用，都在等待释放，但又都不能释放


chapter8：Executor框架


线程池：


https://juejin.im/entry/593109e72f301e005830cd76


1.
interface executor  {
execute()
}

分类：

FixdeThreadPool
通过Executors的newFixedThreadPool()方法创建，它是个线程数量固定的线程池，
该线程池的线程全部为核心线程，它们没有超时机制且排队任务队列无限制，
因为全都是核心线程，所以响应较快，且不用担心线程会被回收

CacheThreadPool
通过Executors的newCachedThreadPool()方法来创建，它是一个数量无限多的线程池，
它所有的线程都是非核心线程，当有新任务来时如果没有空闲的线程则直接创建新的线程
不会去排队而直接执行，并且超时时间都是60s，所以此线程池适合执行大量耗时小的任务。
由于设置了超时时间为60s，所以当线程空闲一定时间时就会被系统回收，所以理论上该线程池不会有占用系统资源的无用线程。

ScheduleThreadPool
通过Executors的newScheduledThreadPool()方法来创建，ScheduledThreadPool
线程池像是上两种的合体，它有数量固定的核心线程，且有数量无限多的非核心线程，
但是它的非核心线程超时时间是0s，所以非核心线程一旦空闲立马就会被回收。这类线程池
适合用于执行定时任务和固定周期的重复任务。

SingleThreadPool
通过Executors的newSingleThreadExecutor()方法来创建，它内部只有一个核心线程，
它确保所有任务进来都要排队按顺序执行。它的意义在于，统一所有的外界任务到同一线程中，
让调用者可以忽略线程同步问题

线程池一般用法
shutDown()，关闭线程池，需要执行完已提交的任务；
shutDownNow()，关闭线程池，并尝试结束已提交的任务；
allowCoreThreadTimeOut(boolen)，允许核心线程闲置超时回收；
execute()，提交任务无返回值；
submit()，提交任务有返回值；



